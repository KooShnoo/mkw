#pragma once

#include <rk_types.h>
#include <rvl/mtx/mtx.h>

#include "kart/KartObjectProxy.hpp"
#include "ItemDirector.hpp"

namespace Item {
    struct RowVec34 {
        Vec x;
        Vec y;
        Vec z;
        Vec t;

        void normalizeZY();
        void normalizeXZ();
        void normalizeYX();
        void normalizeZX();
        void normalizeXY();
        void normalizeYZ();

        void calcDecomposedQuat(Quaternion *mtxQuat, Quaternion *decompQuat);
        void calcQuatAndRotation(Quaternion *mtxQuat, float angle);
        void rotate(RowVec34 *out, s16 angle);
    };
    
    class DragItemDirector : public Kart::KartObjectProxy {
        ItemDirectorPlayer * player;
        u8 playerId;
        u32 curItemId;
        u32 curItemboxItemId;
        u32 itemBehaviour;

        ItemObj * dragItems[3];
        Vec collisionVecs[3];

        u32 dragNum;
        u32 dropTimer;

        RowVec34 transform;
        Vec speed;

        f32 field_0x94;
        f32 speedRatioCapped;
        Vec movement;
        f32 field_0xa8;
        bool inMovement;

        Vec scale;
        u8 field_0xbc[0x154-0xbc];

        bool forceRelease;

        u8 field_0x155[0x17a-0x155];
        s16 axisRotation;
        u32 field_0x17c;
    };
    static_assert(sizeof(DragItemDirector) == 0x180);
}
